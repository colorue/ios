//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `DrawingViewController`, and contains static references to 2 segues.
    struct drawingViewController {
      /// Segue identifier `backToHome`.
      static let backToHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "backToHome")
      /// Segue identifier `saveToHome`.
      static let saveToHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "saveToHome")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `backToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func backToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drawingViewController.backToHome, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `saveToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func saveToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drawingViewController.saveToHome, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `GalleryViewController`, and contains static references to 1 segues.
    struct galleryViewController {
      /// Segue identifier `openDrawing`.
      static let openDrawing: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GalleryViewController, DrawingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "openDrawing")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `openDrawing`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func openDrawing(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GalleryViewController, DrawingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.galleryViewController.openDrawing, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Drawing`.
    static let drawing = _R.storyboard.drawing()
    /// Storyboard `Gallery`.
    static let gallery = _R.storyboard.gallery()
    /// Storyboard `Launch Screen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Drawing", bundle: ...)`
    static func drawing(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drawing)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Gallery", bundle: ...)`
    static func gallery(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gallery)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Launch Screen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `Circle Tool`.
    static let circleTool = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circle Tool")
    /// Image `ClearPattern`.
    static let clearPattern = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClearPattern")
    /// Image `Colorue Logo`.
    static let colorueLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Colorue Logo")
    /// Image `Curve Tool`.
    static let curveTool = Rswift.ImageResource(bundle: R.hostingBundle, name: "Curve Tool")
    /// Image `Line Tool`.
    static let lineTool = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line Tool")
    /// Image `Paint Bucket`.
    static let paintBucket = Rswift.ImageResource(bundle: R.hostingBundle, name: "Paint Bucket")
    /// Image `PositionIndicator`.
    static let positionIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "PositionIndicator")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Circle Tool", bundle: ..., traitCollection: ...)`
    static func circleTool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleTool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClearPattern", bundle: ..., traitCollection: ...)`
    static func clearPattern(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearPattern, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Colorue Logo", bundle: ..., traitCollection: ...)`
    static func colorueLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.colorueLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Curve Tool", bundle: ..., traitCollection: ...)`
    static func curveTool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.curveTool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Line Tool", bundle: ..., traitCollection: ...)`
    static func lineTool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Paint Bucket", bundle: ..., traitCollection: ...)`
    static func paintBucket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paintBucket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PositionIndicator", bundle: ..., traitCollection: ...)`
    static func positionIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.positionIndicator, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationShortcutItems {
      struct newDrawing {
        static let _key = "NewDrawing"
        static let uiApplicationShortcutItemIconType = infoPlistString(path: ["UIApplicationShortcutItems", "NewDrawing"], key: "UIApplicationShortcutItemIconType") ?? "UIApplicationShortcutIconTypeCompose"
        static let uiApplicationShortcutItemTitle = infoPlistString(path: ["UIApplicationShortcutItems", "NewDrawing"], key: "UIApplicationShortcutItemTitle") ?? "New Drawing"
        static let uiApplicationShortcutItemType = infoPlistString(path: ["UIApplicationShortcutItems", "NewDrawing"], key: "UIApplicationShortcutItemType") ?? "NewDrawing"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `drawingCell`.
    static let drawingCell: Rswift.ReuseIdentifier<DrawingCell> = Rswift.ReuseIdentifier(identifier: "drawingCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try drawing.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try gallery.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct drawing: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DrawingViewController

      let bundle = R.hostingBundle
      let name = "Drawing"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'ellipsis.circle' is used in storyboard 'Drawing', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct gallery: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Gallery"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'person.circle' is used in storyboard 'Gallery', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Launch Screen"

      static func validate() throws {
        if UIKit.UIImage(named: "Colorue Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Colorue Logo' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Settings"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
