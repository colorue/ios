//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `DrawingViewController`, and contains static references to 2 segues.
    struct drawingViewController {
      /// Segue identifier `backToHome`.
      static let backToHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "backToHome")
      /// Segue identifier `saveToHome`.
      static let saveToHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "saveToHome")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `backToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func backToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drawingViewController.backToHome, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `saveToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func saveToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrawingViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drawingViewController.saveToHome, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `GalleryViewController`, and contains static references to 1 segues.
    struct galleryViewController {
      /// Segue identifier `openDrawing`.
      static let openDrawing: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GalleryViewController, DrawingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "openDrawing")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `openDrawing`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func openDrawing(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GalleryViewController, DrawingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.galleryViewController.openDrawing, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Drawing`.
    static let drawing = _R.storyboard.drawing()
    /// Storyboard `Gallery`.
    static let gallery = _R.storyboard.gallery()
    /// Storyboard `Launch Screen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Drawing", bundle: ...)`
    static func drawing(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drawing)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Gallery", bundle: ...)`
    static func gallery(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gallery)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Launch Screen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 52 images.
  struct image {
    /// Image `Alpha High`.
    static let alphaHigh = Rswift.ImageResource(bundle: R.hostingBundle, name: "Alpha High")
    /// Image `Alpha Low`.
    static let alphaLow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Alpha Low")
    /// Image `Alpha Mid`.
    static let alphaMid = Rswift.ImageResource(bundle: R.hostingBundle, name: "Alpha Mid")
    /// Image `BullsEyeActive`.
    static let bullsEyeActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "BullsEyeActive")
    /// Image `BullsEye`.
    static let bullsEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "BullsEye")
    /// Image `Check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check")
    /// Image `ChevronDown`.
    static let chevronDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChevronDown")
    /// Image `ClearPattern`.
    static let clearPattern = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClearPattern")
    /// Image `DropperActive`.
    static let dropperActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "DropperActive")
    /// Image `Dropper`.
    static let dropper = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dropper")
    /// Image `FacebookS`.
    static let facebookS = Rswift.ImageResource(bundle: R.hostingBundle, name: "FacebookS")
    /// Image `Follow Long`.
    static let followLong = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow Long")
    /// Image `Follow`.
    static let follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow")
    /// Image `Followed Blue`.
    static let followedBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Followed Blue")
    /// Image `Followed Orange`.
    static let followedOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "Followed Orange")
    /// Image `Followed Purple`.
    static let followedPurple = Rswift.ImageResource(bundle: R.hostingBundle, name: "Followed Purple")
    /// Image `Followed Red`.
    static let followedRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Followed Red")
    /// Image `Followed`.
    static let followed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Followed")
    /// Image `FriendsU`.
    static let friendsU = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsU")
    /// Image `Friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "Friends")
    /// Image `HomeU`.
    static let homeU = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeU")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `Like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "Like")
    /// Image `Liked`.
    static let liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Liked")
    /// Image `Logo InactiveS`.
    static let logoInactiveS = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo InactiveS")
    /// Image `Logo Inactive`.
    static let logoInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo Inactive")
    /// Image `Logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logout")
    /// Image `Message IconG`.
    static let messageIconG = Rswift.ImageResource(bundle: R.hostingBundle, name: "Message IconG")
    /// Image `Message Icon`.
    static let messageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Message Icon")
    /// Image `Morphu Brand`.
    static let morphuBrand = Rswift.ImageResource(bundle: R.hostingBundle, name: "Morphu Brand")
    /// Image `Onboarding1`.
    static let onboarding1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding1")
    /// Image `Onboarding2`.
    static let onboarding2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding2")
    /// Image `Onboarding3`.
    static let onboarding3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding3")
    /// Image `Onboarding4`.
    static let onboarding4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding4")
    /// Image `Onboarding5`.
    static let onboarding5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding5")
    /// Image `Paint Bucket Active`.
    static let paintBucketActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Paint Bucket Active")
    /// Image `Paint Bucket`.
    static let paintBucket = Rswift.ImageResource(bundle: R.hostingBundle, name: "Paint Bucket")
    /// Image `PositionIndicator`.
    static let positionIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "PositionIndicator")
    /// Image `ProfileU`.
    static let profileU = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileU")
    /// Image `Profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile")
    /// Image `Quit Icon`.
    static let quitIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Quit Icon")
    /// Image `RedoIcon`.
    static let redoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "RedoIcon")
    /// Image `Save IconG`.
    static let saveIconG = Rswift.ImageResource(bundle: R.hostingBundle, name: "Save IconG")
    /// Image `Save Icon`.
    static let saveIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Save Icon")
    /// Image `SearchU`.
    static let searchU = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchU")
    /// Image `Search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search")
    /// Image `TrashIcon`.
    static let trashIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "TrashIcon")
    /// Image `UndoIcon`.
    static let undoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "UndoIcon")
    /// Image `Upload`.
    static let upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "Upload")
    /// Image `Watermark`.
    static let watermark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Watermark")
    /// Image `X`.
    static let x = Rswift.ImageResource(bundle: R.hostingBundle, name: "X")
    /// Image `facebook-logo`.
    static let facebookLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Alpha High", bundle: ..., traitCollection: ...)`
    static func alphaHigh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alphaHigh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Alpha Low", bundle: ..., traitCollection: ...)`
    static func alphaLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alphaLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Alpha Mid", bundle: ..., traitCollection: ...)`
    static func alphaMid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alphaMid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BullsEye", bundle: ..., traitCollection: ...)`
    static func bullsEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bullsEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BullsEyeActive", bundle: ..., traitCollection: ...)`
    static func bullsEyeActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bullsEyeActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChevronDown", bundle: ..., traitCollection: ...)`
    static func chevronDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClearPattern", bundle: ..., traitCollection: ...)`
    static func clearPattern(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearPattern, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dropper", bundle: ..., traitCollection: ...)`
    static func dropper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropper, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DropperActive", bundle: ..., traitCollection: ...)`
    static func dropperActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropperActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FacebookS", bundle: ..., traitCollection: ...)`
    static func facebookS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Follow Long", bundle: ..., traitCollection: ...)`
    static func followLong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followLong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Follow", bundle: ..., traitCollection: ...)`
    static func follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.follow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Followed Blue", bundle: ..., traitCollection: ...)`
    static func followedBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followedBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Followed Orange", bundle: ..., traitCollection: ...)`
    static func followedOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followedOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Followed Purple", bundle: ..., traitCollection: ...)`
    static func followedPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followedPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Followed Red", bundle: ..., traitCollection: ...)`
    static func followedRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followedRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Followed", bundle: ..., traitCollection: ...)`
    static func followed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsU", bundle: ..., traitCollection: ...)`
    static func friendsU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HomeU", bundle: ..., traitCollection: ...)`
    static func homeU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Liked", bundle: ..., traitCollection: ...)`
    static func liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo Inactive", bundle: ..., traitCollection: ...)`
    static func logoInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoInactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo InactiveS", bundle: ..., traitCollection: ...)`
    static func logoInactiveS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoInactiveS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Message Icon", bundle: ..., traitCollection: ...)`
    static func messageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Message IconG", bundle: ..., traitCollection: ...)`
    static func messageIconG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageIconG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Morphu Brand", bundle: ..., traitCollection: ...)`
    static func morphuBrand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.morphuBrand, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Onboarding1", bundle: ..., traitCollection: ...)`
    static func onboarding1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Onboarding2", bundle: ..., traitCollection: ...)`
    static func onboarding2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Onboarding3", bundle: ..., traitCollection: ...)`
    static func onboarding3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Onboarding4", bundle: ..., traitCollection: ...)`
    static func onboarding4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Onboarding5", bundle: ..., traitCollection: ...)`
    static func onboarding5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Paint Bucket Active", bundle: ..., traitCollection: ...)`
    static func paintBucketActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paintBucketActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Paint Bucket", bundle: ..., traitCollection: ...)`
    static func paintBucket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paintBucket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PositionIndicator", bundle: ..., traitCollection: ...)`
    static func positionIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.positionIndicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileU", bundle: ..., traitCollection: ...)`
    static func profileU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Quit Icon", bundle: ..., traitCollection: ...)`
    static func quitIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quitIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RedoIcon", bundle: ..., traitCollection: ...)`
    static func redoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Save Icon", bundle: ..., traitCollection: ...)`
    static func saveIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saveIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Save IconG", bundle: ..., traitCollection: ...)`
    static func saveIconG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saveIconG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchU", bundle: ..., traitCollection: ...)`
    static func searchU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TrashIcon", bundle: ..., traitCollection: ...)`
    static func trashIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trashIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UndoIcon", bundle: ..., traitCollection: ...)`
    static func undoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.undoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Upload", bundle: ..., traitCollection: ...)`
    static func upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Watermark", bundle: ..., traitCollection: ...)`
    static func watermark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watermark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "X", bundle: ..., traitCollection: ...)`
    static func x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook-logo", bundle: ..., traitCollection: ...)`
    static func facebookLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookLogo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationShortcutItems {
      struct newDrawing {
        static let _key = "NewDrawing"
        static let uiApplicationShortcutItemIconType = infoPlistString(path: ["UIApplicationShortcutItems", "NewDrawing"], key: "UIApplicationShortcutItemIconType") ?? "UIApplicationShortcutIconTypeCompose"
        static let uiApplicationShortcutItemTitle = infoPlistString(path: ["UIApplicationShortcutItems", "NewDrawing"], key: "UIApplicationShortcutItemTitle") ?? "New Drawing"
        static let uiApplicationShortcutItemType = infoPlistString(path: ["UIApplicationShortcutItems", "NewDrawing"], key: "UIApplicationShortcutItemType") ?? "NewDrawing"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `drawingCell`.
    static let drawingCell: Rswift.ReuseIdentifier<DrawingCell> = Rswift.ReuseIdentifier(identifier: "drawingCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try drawing.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try gallery.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct drawing: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DrawingViewController

      let bundle = R.hostingBundle
      let name = "Drawing"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'ellipsis.circle' is used in storyboard 'Drawing', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct gallery: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Gallery"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Launch Screen"

      static func validate() throws {
        if UIKit.UIImage(named: "Morphu Brand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Morphu Brand' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
